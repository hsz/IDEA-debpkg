plugins {
    // Java support
    id "java"
    // gradle-intellij-plugin - read more: https://github.com/JetBrains/gradle-intellij-plugin
    id "org.jetbrains.intellij" version "0.4.21"
    // gradle-changelog-plugin - read more: https://github.com/JetBrains/gradle-changelog-plugin
    //id "org.jetbrains.changelog" version "0.4.0"
}

//apply plugin: 'org.jetbrains.changelog'

// Import variables from gradle.properties file
String pluginSinceBuild = project.ext.'pluginSinceBuild' as String
String pluginUntilBuild = project.ext.'pluginUntilBuild' as String

String platformType = project.ext.'platformType' as String
String platformVersion = project.ext.'platformVersion' as String
String platformDownloadSources = project.ext.'platformDownloadSources' as String

group = pluginGroup
version = pluginVersion

// Configure project's dependencies
repositories {
    mavenCentral()
    jcenter()
}
dependencies {
}

// Configure gradle-intellij-plugin plugin.
// Read more: https://github.com/JetBrains/gradle-intellij-plugin
intellij {
    pluginName = pluginName
    version = platformVersion
    type = platformType
    downloadSources = platformDownloadSources.toBoolean().booleanValue()
    updateSinceUntilBuild = true

/*
    patchPluginXml {
        changeNotes({ changelog.getUnreleased().toHTML() })
    }*/
//  Plugin Dependencies:
//  https://www.jetbrains.org/intellij/sdk/docs/basics/plugin_structure/plugin_dependencies.html
//
//  setPlugins("java")
}

/*
changelog {
    version = "${project.version}"
    path = "${project.projectDir}/CHANGELOG.md"
    headerFormat = "[{0}]"
    headerArguments = ["${project.version}"]
    itemPrefix = "-"
    keepUnreleasedSection = true
    unreleasedTerm = "[Unreleased]"
    groups = ["Added", "Changed", "Deprecated", "Removed", "Fixed", "Security"]
}*/

// Include the generated files in the source set
sourceSets["main"].java.srcDir("src/main/gen")

// Set the compatibility versions to 1.8
tasks.withType(JavaCompile) {
    sourceCompatibility = "1.8"
    targetCompatibility = "1.8"
}

tasks.patchPluginXml.configure {
    version(pluginVersion)
    sinceBuild(pluginSinceBuild)
    untilBuild(pluginUntilBuild)
}
        // Extract the <!-- Plugin description --> section from README.md and provide for the plugin's manifest
        /*pluginDescription(closure {
            File("./README.md").readText().lines().run {
                subList(indexOf("<!-- Plugin description -->") + 1, indexOf("<!-- Plugin description end -->"))
            }.joinToString("\n").run { markdownToHTML(this) }
        })*/

tasks.publishPlugin.configure {
    dependsOn("patchChangelog")
    token(System.getenv("PUBLISH_TOKEN"))
    channels("default")
}
