fields:
  - canonicalName: Package
    onlyInParagraphType: "Package"
    description: |
      Declares the name of a binary package
    valueType: SINGLE_TRIVIAL_VALUE
    valueValidation: /^[a-z0-9][a-z0-0.+-]+$/
    supportsSubstvars: false

  - canonicalName: Source
    onlyInParagraphType: "Source"
    description: |
      Declares the name of the source package
    valueType: SINGLE_TRIVIAL_VALUE
    # Only valid for DebianControl; in other variants, it may have an optional version number appended
    # a la "foo (1.0-1)"
    valueValidation: /^[a-z0-9][a-z0-0.+-]+$/
    supportsSubstvars: false

  - canonicalName: Package-Type
    description: |
      <b>Special-purpose only</b>.  <em>This field is a special purpose field and is rarely needed. You are recommended to omit unless you know you need it.</em>

      <p>Determines the type of package.  This field can be used to declare that a given package is a different type of package than usual.  The primary case
         where this is known to be useful is for building micro-debs ("udeb") to be consumed by the debian-installer.</p>
    valueType: SINGLE_KEYWORD
    warnIfDefault: true
    onlyInParagraphType: "Package"
    defaultValue: "deb"
    # aliases: ["X-Package-Type", "XC-Package-Type"]
    keywordList:
      - value: "deb"
        description: |
          The package will be built as a regular deb.
      - value: "udeb"
        description: |
          The package will be built as a micro-deb (also known as a udeb).  These are solely used by the debian-installer.

  - canonicalName: Essential
    valueType: SINGLE_KEYWORD
    onlyInParagraphType: "Package"
    description: |
      <b>Special-purpose only</b>.  <em>This field is a special purpose field and is rarely needed. You are recommended to omit unless you know you need it.</em>

      <p>Whether packages the package should be considered Essential as defined by Debian Policy.</p>

      <p>Essential packages are subject to several distinct but very important rules:
      <ul>
        <li>Essential packages are considered essential for the system to work.  The packaging system (APT and dpkg) will refuse to uninstall it without some very insisting force options and warnings.</li>
        <li>Other packages are not required to declare explicit dependencies on essential packages as a side-effect of the above except as to ensure a certain version of the essential package is installed first.</li>
        <li>Once installed, essential packages function must at all time no matter where dpkg is in its installation or upgrade process.</li>
      </ul>
      </p>
    warnIfDefault: true
    defaultValue: "no"
    keywordList:
      - value: "yes"
        description: |
          The package is essential and uninstalling it will completely and utterly break the system beyond repair.
      - value: "no"
        description: |
          The package is a regular package.  This is the default and recommeded.

          Note that declaring a package to be "Essential: no" is the same as not having the field except the less
          wastes fewer bytes on everyones harddisk.

  - canonicalName: Standards-Version
    onlyInParagraphType: "Source"
    description: |
      Declares the last semantic version of the Debian Policy this package as last checked against.
      <em>Example</em>:
      <pre>Standards-Version: 4.5.2</pre>
      Note that the last version part (the <em>X</em> in 4.5.2.<em>X</em>) is typically omitted as it
      is used solely for editioral changes to the policy (e.g. typo fixes).
    valueType: SINGLE_TRIVIAL_VALUE
    valueValidation: /^\d+[.]\d+[.]\d+(?:[.]\d+)$/
    supportsSubstvars: false

  - canonicalName: Maintainer
    onlyInParagraphType: "Source"
    description: |
      The maintainer of the package.
      <em>Example</em>:
      <pre>Maintainer: Jane Contributor &lt;jane@janes.email-provider.org&gt;</pre>
      Note: If a person is listed in the Maintainer field, they should <em>not</em> be listed in Uploader field.
    # Technically wrong, but using SINGLE_TRIVIAL_VALUE trips another validation rule for a valid maintainer field
    valueType: FREE_TEXT_VALUE
    supportsSubstvars: false

  - canonicalName: Uploaders
    onlyInParagraphType: "Source"
    description: |
      Comma separated list of uploaders associcated with the package.
      <em>Example</em>:
      <pre>Uploaders:
         John Doe &lt;john@doe.org&gt;,
         Lisbeth Worker &lt;lis@worker.org&gt;,
      </pre>
      Note: If a person is listed in the Maintainer field, they should <em>not</em> be listed in Uploader field.
    valueType: COMMA_SEPARATED_VALUE_LIST
    supportsSubstvars: false

  - canonicalName: Section
    description: |
      Define the section of the Package

      <em>Example</em>:
      <pre>Section: devel</pre>

      <p>see <a>https://packages.debian.org/unstable</a> for more details about the sections.</p>
    valueType: SINGLE_KEYWORD
    keywordList: [
        "admin", "cli-mono", "comm", "database", "debian-installer", "debug", "devel", "doc",
        "editors", "education", "eletronics", "embedded", "fonts", "games", "gnome", "gnu-r", "gnustep",
        "graphics", "hamradio", "haskell", "interpreters", "introspection", "java", "javascript", "kde",
        "kernel", "libdevel", "libs", "lisp", "localization", "mail", "math", "metapackages", "misc",
        "net", "news", "ocaml", "oldlibs", "otherosfs", "perl", "php", "python", "ruby", "rust", "science",
        "shells", "sound", "tasks", "tex", "text", "utils", "vcs", "video", "virtual", "web", "x11",
        "xfce", "zope"
      ]

  - canonicalName: Testsuite
    onlyInParagraphType: "Source"
    description: |
      Declares a "dep8" runtime test suite if any.

      If you declare a test in <em>debian/tests/control</em>, then <b>dpkg</b> will automatically include that for you without this field being set.
    valueType: SPACE_SEPARATED_VALUE_LIST
    supportsSubstvars: false

  - canonicalName: Homepage
    description: |
      <p>Link to the upstream homepage for this source package.</p>

      <em>Example</em>:
      <pre>Homepage: https://www.janes-tools.org/frob-cleaner</pre>
    valueType: FREE_TEXT_VALUE

  - canonicalName: Multi-Arch
    onlyInParagraphType: "Package"
    description: |
      <b>Advanced field</b>.  <em>This field is covers an advanced topic.  If you are new to packaging, you are
         adviced to leave it at its default until you have a working basic package or lots of time to understand
         this topic.</em>
      <p>Declare the Multi-Arch interface of the package.</p>
      <p>The Multi-Arch field is used to inform the installation system (APT and dpkg) about how it should handle
      dependency relations involving this package and foreign architecture.</p>
      <em>Example</em>:
      <pre>Multi-Arch: foreign
      </pre>
      <p>The rules for Multi-Arch can be quite complicated, but in many cases the following simple rules of thumb
      gets you a long way:
      <ul>
        <li>If the <a href="https://wiki.debian.org/MultiArch/Hints">Multi-Arch hinter</a> comes with a hint, then
            it almost certainly correct.  You are recommended to check the hint for further details (some changes
            can be complicated to do).  Note that the Multi-Arch hinter is only run for official Debian packages
            and may not be applicable to your case.
        </li>
        <li>If you have an "Architecture: all" data-only package, then it often want to be "Multi-Arch: foreign".</li>
        <li>If you have an architecture dependent package, where everything is installed in
            <em>/usr/lib/&lt;DEB_HOST_MULTIARCH&gt;</em> (plus a bit of standard documentation in
            <em>/usr/share/doc</em>), then you probably want "Multi-Arch: same".</li>
        <li>If none of the above applies, then leave it at its default value unless you know what you are doing or
            you are receiving advice from a Multi-Arch expert.</li>
      </ul>
      </p>
      <p>There are 4 possible values for the Multi-Arch field, though not all values are applicable to all packages:
      <ul>
        <li><b>no</b> - The default. The package can be installed for at most one architecture at the time.  It can
          <i>only</i> satisfy relations for the same architecture as itself. Note that "Architecture: all" packages
          are considered as a part of the system's "primary" architecture (see output of
          <pre>dpkg --print-architecture</pre>).
          Note: Despite the "no", the package <em>can</em> be installed for a foreign architecture (e.g. you can
          install a 32-bit version of a package on a 64-bit system).  However, packages depending on it must also
          be installed for the foreign architecture.
        </li>
        <li><b>foreign</b> - The package can be installed for at most one architecture at the time.  However, it can
            satisfy relations for packages regardless of their architecture.  This is often useful for packages
            solely providingly data or binaries that have "Multi-Arch neutral interfaces". Sadly, describing
            a "Multi-Arch neutral interface" is hard and often only done by Multi-Arch experns on a case-by-case
            basis.  Some programs are have "Multi-Arch dependent interfaces" and are not safe to declare as
            "Multi-Arch: foreign".
            The name "foreign" refers to the fact that the package can satisfy relations for native <em>and foreign</em>
            architectures at the same time.
        </li>
        <li><b>same</b> - The same version of the package can be co-installed for multiple architecture. However,
            for this to work, the package <b>MUST</b> ship all files in architecture unique paths (usually
            beneath <em>/usr/lib/&lt;DEB_HOST_MULTIARCH&gt;</em>) <em>OR</em> have bit-for-bit identical content
            in files that are in non-architecture unique paths (e.g. <em>/usr/share/doc</em>).
            The name "same" refers to the fact that the package can satisfy relations only for the "same"
            architecture as itself.  However, in this case, it is co-installable with itself as noted above.
            Note: This value <b>cannot</b> be used with "Architecture: all".
        </li>
        <li><b>allowed</b> - <em>Advanced value</em>.  The package is <b>NOT</b> co-installable with itself but
            can satisfy Multi-Arch foreign and Multi-Arch same relations at the same.  This is useful for
            implementations of scripting languages (e.g. Perl or Python).  Here the interpreter contextually need
            to satisfy some relations as "Multi-Arch: foreign" and others as "Multi-Arch: same" (or "Multi-Arch: no").
            Typically, native extentions or plugins will need a "Multi-Arch: same"-relation as they only work with
            the interpreter compiled for the same machine architecture as themselves whereas scripts are usally less
            picky and can rely on the "Multi-Arch: foreign" relation.  Packages wanting to rely on the
            "Multi-Arch: foreign" interface must explicitly declare this adding a ":any" suffix to the package name
            in the dependency relation (e.g. "Depends: python3:any").  However, the ":any" suffix cannot be used
            unconditionally and should not be used unless you know you need it.
        </li>
      </ul>
      </p>
    valueType: SINGLE_KEYWORD
    defaultValue: "no"
    keywordList:

      - value: "no"
        description: |
          The default. The package can be installed for at most one architecture at the time.  It can
          <i>only</i> satisfy relations for the same architecture as itself. Note that "Architecture: all" packages
          are considered as a part of the system's "primary" architecture (see output of
          <pre>dpkg --print-architecture</pre>).
          Note: Despite the "no", the package <em>can</em> be installed for a foreign architecture (e.g. you can
          install a 32-bit version of a package on a 64-bit system).  However, packages depending on it must also
          be installed for the foreign architecture.

      - value: "foreign"
        description: |
          The package can be installed for at most one architecture at the time.  However, it can
          satisfy relations for packages regardless of their architecture.  This is often useful for packages
          solely providingly data or binaries that have "Multi-Arch neutral interfaces". Sadly, describing
          a "Multi-Arch neutral interface" is hard and often only done by Multi-Arch experns on a case-by-case
          basis.  Some programs are have "Multi-Arch dependent interfaces" and are not safe to declare as
          "Multi-Arch: foreign".
          The name "foreign" refers to the fact that the package can satisfy relations for native <em>and foreign</em>
          architectures at the same time.

      - value: "same"
        description: |
          The same version of the package can be co-installed for multiple architecture. However,
          for this to work, the package <b>MUST</b> ship all files in architecture unique paths (usually
          beneath <em>/usr/lib/&lt;DEB_HOST_MULTIARCH&gt;</em>) <em>OR</em> have bit-for-bit identical content
          in files that are in non-architecture unique paths (e.g. <em>/usr/share/doc</em>).
          The name "same" refers to the fact that the package can satisfy relations only for the "same"
          architecture as itself.  However, in this case, it is co-installable with itself as noted above.
          Note: This value <b>cannot</b> be used with "Architecture: all".

      - value: "allowed"
        description: |
          <em>Advanced value</em>.  The package is <b>NOT</b> co-installable with itself but
          can satisfy Multi-Arch foreign and Multi-Arch same relations at the same.  This is useful for
          implementations of scripting languages (e.g. Perl or Python).  Here the interpreter contextually need
          to satisfy some relations as "Multi-Arch: foreign" and others as "Multi-Arch: same" (or "Multi-Arch: no").
          Typically, native extentions or plugins will need a "Multi-Arch: same"-relation as they only work with
          the interpreter compiled for the same machine architecture as themselves whereas scripts are usally less
          picky and can rely on the "Multi-Arch: foreign" relation.  Packages wanting to rely on the
          "Multi-Arch: foreign" interface must explicitly declare this adding a ":any" suffix to the package name
          in the dependency relation (e.g. "Depends: python3:any").  However, the ":any" suffix cannot be used
          unconditionally and should not be used unless you know you need it.

  - canonicalName: Priority
    valueType: SINGLE_KEYWORD
    description: |
      The priority field describes how important the package is for the functionality of the system.

      Unless you know you need a different value, you should choose <b>optional</b> for your packages.
    defaultValue: "optional"
    keywordList:
      - value: "required"
        description: |
          The package is necessary for the proper functioning of the system (read: dpkg needs it).

          No two packages that both have a priority of <em>standard</em> or higher may conflict with each
          other.

          Applicable if dpkg <em>needs</em> this package to function and it is not a library.
      - value: "important"
        description: |
          The <em>important<em> packages are a bare minumum of commonly-expected and necessary tools.

          Applicable if 99% of all users in the distribution needs this package and it is not a library.

          No two packages that both have a priority of <em>standard</em> or higher may conflict with each
          other.

          Applicable if dpkg <em>needs</em> this package to function and it is not a library.
      - value: "standard"
        description: |
          These packages provide a reasonable small but not too limited character-mode system.  This is
          what will be installed by default (by the debian-installer) if hte user does not select anything
          else.  This does not include many large applications.

          Applicable if your distribution installer will install this package by default on a new system
          and it is not a library.

          No two packages that both have a priority of <em>standard</em> or higher may conflict with each
          other.
      - value: "optional"
        description: |
          This is the default priority for the majority of all packages in the Debian archive.
      - value: "extra"
        description: |
          Obsolete alias of <em>optional</em>.

  - canonicalName: Rules-Requires-Root
    onlyInParagraphType: "Source"
    valueType: SPACE_SEPARATED_VALUE_LIST
    defaultValue: "binary-targets"
    description: |
      Declare if and when the package build assumes it is run as root or fakeroot.  Most packages do not need to run as root or fakeroot and the legacy behaviour comes with a performance cost.

      <em>Example:</em>
      <pre>Rules-Requires-Root: no</pre>

       Setting this field to "no" <em>can</em> cause the package to stop building if it requires root.  Depending on the situation, it might require some trivial or some complicated changes to fix that.  If it breaks and you cannot figure out how to fix it, then reset the field to "binary-targets" and move on until you have time to fix it.

      Note it is not possible to require running the package as "true root".
    keywordList:
      - value: "no"
        isExclusive: true
        description: |
          The build process will not require root or fakeroot during any step.  This enables dpkg-buildpackage and
          debhelper to perform several optimizations during the build.
      - value: "binary-targets"
        isExclusive: true
        description: |
          The build process assumes that dpkg-buildpackage will run the relevant binary target with root or fakeroot.
      # Permit unknown values; we do not have a full list of architectures handy
      - ...
    unknownKeywordValidation: /^[a-z0-9][a-z0-0.+-]+/\S+$/
    supportsSubstvars: false

  - canonicalName: Architecture
    onlyInParagraphType: "Package"
    description: |
      <p>Determines which architectures this package can be compiled for or if it is an architecture-independent
         package.  The value is a space-separated list of dpkg architecture names or wildcards.
      </p>
      <em>Example:</em>
      <pre>
      Package: architecture-specific-package
      Architecture: any
      # ...

      Package: data-only-package
      Architecture: all
      Multi-Arch: foreign
      # ...

      Package: linux-only-package
      Architecture: linux-any
      # ...
      </pre>
      <p>When in doubt, stick to the values <b>all</b> (for scripts, data or documentation, etc.) or <b>any</b>
         (for anything that can be compiled).  For official Debian packages, it is often easier to attempt the
         compilation for unsupported architectures than to maintain the list of machine architectures that work.
      </p>
    valueType: SPACE_SEPARATED_VALUE_LIST
    keywordList:
      - value: "all"
        description: |
          The package is an architecture independent package.  This is typically fitting for packages containing only scripts, data or documentatition.

          This name <b>all</b> refers to the fact that the package can be used for <em>all</em> architectures at the same.  Though note that it is still subject to the rules of the <b>Multi-Arch</b> field.
        isExclusive: true
      - value: "any"
        description: |
          The package is an architecture dependent package and need to be compiled for each and every architecture it.

          The name <b>any</b> refers to the fact that this is an architecture <em>wildcard</em> matching <em>any machine architecture</em> supported by dpkg.
      # Permit unknown values; we do not have a full list of architectures handy
      - ...
    supportsSubstvars: false

  - canonicalName: X-DH-Build-For-Type
    onlyInParagraphType: "Package"
    description: |
      <b>Special-purpose only</b>.  <em>This field is a special purpose field and is rarely needed. You are recommended to omit unless you know you need it.</em>
      <p>This field is used when building a cross-compiling C-compiler (or similar cases), some packages need
        to be build for target (DEB_<b>TARGET</b>_ARCH) rather than the host (DEB_<b>HOST</b>_ARCH) architecture.
      </p>
      <br>
      <em>Example</em>:
      <pre>
      Package: gcc
      Architecture: any
      # ...

      Package: libgcc-s1
      Architecture: any
      # When building a cross-compiling gcc, then this library needs to be built for the target architecture
      # as binaries compiled by gcc will link with this library.
      X-DH-Build-For-Type: target
      # ...
      </pre>
      <p>If you are in doubt, then you probably do <b>not</b> need this field.</p>
    defaultValue: "host"
    valueType: SINGLE_KEYWORD
    keywordList:
      - value: "host"
        description: |
          The package should be compiled for <b>DEB_HOST_ARCH</b> (the default).
      - value: "target"
        description: |
          The package should be compiled for <b>DEB_HOST_TARGET</b>.
    supportsSubstvars: false

  - canonicalName: Description
    description: |
      <p>A human-readable description of the package.  This field consists of two related but distinct parts.</p>

      <p>The first line immedately after the field is called the <em>Synopsis</em> and is a short "noun-phrase" intended to provide a one-line summary of the package.</p>
      <p>The lines after the <em>Synopsis</em> is known as the <em>Extended Description</em> and is intended as a longer summary of the package.</p>

      <em>Example:</em>
      <pre>Description: documentation generator for Python projects
        Sphinx is a tool for producing documentation for Python projects, using
        reStructuredText as markup language.
        .
        Sphinx features:
         * HTML, CHM, LaTeX output,
         * Cross-referencing source code,
         * Automatic indices,
         * Code highlighting, using Pygments,
         * Extensibility. Existing extensions:
           - automatic testing of code snippets,
           - including docstrings from Python modules.
        .
        Build-depend on sphinx if your package uses /usr/bin/sphinx-*
        executables. Build-depend on python3-sphinx if your package uses
        the Python API (for instance by calling python3 -m sphinx).
      </pre>

      <p>The <em>Synopsis</em> is usually displayed in cases where there is limited space such as when reviewing the search results from "apt search foo".  It is often a good idea to imagine that the <em>Synopsis</em> part is inserted into a sentence like "The package provides &ltSynopsis-goes-here&gt;"</p>.
      <p>The <em>Extended Description</em> is a standalone description that should describe what the packaeg does and how it relates to the rest of the system (in terms of, for example, which subsystem it is which part of).</p>
      <p>Please see <a href="https://www.debian.org/doc/debian-policy/ch-controlfields.html#description">https://www.debian.org/doc/debian-policy/ch-controlfields.html#description</a> for more details about the description field and suggestions for how to write it.</a>
    valueType: FREE_TEXT_VALUE

substvars:
  - name: "${Arch}"
    description: |
      The current host architecture (i.e. the architecture the package is being built for).  Defaults to
      <b>DEB_HOST_ARCH</b> (but can differ with <b>X-DH-BUild-For-Type</b>).

  - name: "${source:Version}"
    description: |
      The version of the source package.

  - name: "${source:Upstream-Version}"
    description: |
      The version of the source package that denotes the upstream part of the version though including the Debian epoch if any.

  - name: "${binary:Version}"
    description: |
      The version of the binary package.  This is <em>usually</em> the same as ${source:Version} with the exception of the following two cases: binNMUs and custom versions passed to <b>dpkg-gencontrol</b>.

  - name: "${Newline}"
    value: "\n"
    description: |
      Expands to a single newline character.

  - name: "${Space}"
    value: " "
    description: |
      Expands to a single space character.

  - name: "${Tab}"
    value: "\t"
    description: |
      Expands to a single tab character.

  - name: "${}"
    value: "$"
    description: |
      Not a true substitution value but will be replaced by a literal $ sign after all substituions have been made.

  - pattern: "${shlibs:<FIELD_NAME>}"
    fieldNames: ["Pre-Depends", "Depends", "Recommends", "Suggests"]
    description: |
      This variable can be generated at runtime by <b><a href="https://manpages.debian.org/dpkg-dhlibdeps.1">dpkg-shlibdeps</a></b> if it is called (possibly indirectly via <b><a href="https://manpages.debian.org/dh_genshlibdeps.1">dh_genshlibdeps</a></b>).

      By default, only <b>${shlibs:Depends}</b> is generated.  However, other the variants can appear if "-d<Name>" is passed to <b>dpkg-shlibdeps</b>.
      Variable settings with names of this form are generated by <b><a href="https://manpages.debian.org/dpkg-dhlibdeps.1">dpkg-shlibdeps</a></b>.
    docSource: "dpkg-shlibdeps(1)"

#  - pattern: "S:<FIELD_NAME>"
#    fieldFrom: SOURCE_PARAGRAPH

#  - pattern: "F:<FIELD_NAME>"
#    fieldFrom: CURRENT_PARAGRAPH

  - name: "${source:Synopsis}"
    fieldFrom: SOURCE_PARAGRAPH
    fieldName: Description
    description: |
      Expands to the <em>Synopsis</em> part of the <em>Description</em> field from the <em>Source</em> paragraph (if present).

      This can be useful for having a standard synopsis that can be reused in all binary packages (followed by a unique bit).

      <em>Example:</em>
      <pre>Source: foo
      ...
      Description: my common synopsis
        Some extended description related to foo.
        .
        This can span multiple lines:
          * and include
          * a list
          * if needed.

      Package: libfoo1
      ...
      Description: ${source:Synopsis} - library
       ${source:Extended-Description}
       .
       This package contains the runtime libraries for foo.

      Package: libfoo-dev
      ...
      Description: ${source:Synopsis} - devel
       ${source:Extended-Description}
       .
       This package contains the headers for compiling against libfoo.
      </pre>

  - name: "${source:Extended-Description}"
    fieldFrom: SOURCE_PARAGRAPH
    fieldName: Description
    description: |
      Expands to the <em>Extendend-Description</em> part of the <em>Description</em> field from the <em>Source</em> paragraph (if present).

      This can be useful for having a standard extended description that can be reused in all binary packages (followed by a unique bit).

      Please see the documentation for <b>${source:Synopsis}</b> for an example of how to use this substvar.

  - name: "${misc:Depends}"
    description: |
      Additional dependencies injected by debhelper based tools when they conclude they are necessary.
    docSource: "debhelper(7)"

  - name: "${perl:Depends}"
    description: |
      Additional Perl related dependencies injected by dh_perl when it concludes they are necessary.
    providingTool: "dh_perl(1)"
