/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

// Copyright 2000-2020 JetBrains s.r.o. and other contributors. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
package org.intellij.sdk.language;

import com.github.nthykier.debpkg.deb822.psi.Deb822Types;
import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;import com.intellij.spellchecker.tokenizer.Tokenizer;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Deb822.flex</tt>
 */
public class Deb822Lexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int WAITING_FOR_SEPARATOR = 2;
  public static final int MAYBE_CONT_VALUE = 4;
  public static final int PARSING_VALUE = 6;
  public static final int GPG_PARSE_ARMORED_HEADERS = 8;
  public static final int GPG_BEGIN_SIGNATURE_ARMORED_HEADERS = 10;
  public static final int GPG_SIGNATURE_BLOB = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  2,  2,  3,  4,  5,  5,  6,  7,  6,  8,  9, 10
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\33\1\14\1\1\1\0\1\3\1\5\22\33\1\2\2\15\1\4\1\6\5\15\1\34\1\35\1\36\1\11"+
    "\1\15\1\35\12\10\1\13\2\15\1\35\3\15\1\27\1\16\1\10\1\25\1\17\1\10\1\20\1"+
    "\10\1\21\3\10\1\26\1\22\1\10\1\23\1\10\1\32\1\24\1\30\1\31\5\10\4\15\1\35"+
    "\1\15\32\10\1\7\1\15\1\12\1\15\6\33\1\0\32\33\1\0\337\33\1\0\177\33\13\0\35"+
    "\33\2\0\5\33\1\0\57\33\1\0\40\33");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\13\0\1\1\1\2\1\3\1\1\1\4\1\1\1\2"+
    "\1\5\1\6\1\1\1\6\1\7\1\1\1\10\1\11"+
    "\2\10\1\12\3\1\1\13\1\14\1\2\1\1\2\15"+
    "\3\0\1\3\1\0\1\16\7\0\1\15\2\0\1\17"+
    "\1\20\1\15\1\0\1\15\1\0\1\15\1\0\1\15"+
    "\1\0\1\15\1\0\1\15\60\0\1\21\3\0\1\22"+
    "\4\0\1\23";

  private static int [] zzUnpackAction() {
    int [] result = new int[125];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\37\0\76\0\135\0\174\0\233\0\272\0\331"+
    "\0\370\0\u0117\0\u0136\0\u0155\0\u0174\0\u0193\0\u01b2\0\u01d1"+
    "\0\u01f0\0\u020f\0\u0155\0\u0155\0\u022e\0\u024d\0\u026c\0\u026c"+
    "\0\u028b\0\u0155\0\u02aa\0\u02c9\0\u0155\0\u02e8\0\u0307\0\u0326"+
    "\0\u02e8\0\u02e8\0\u0155\0\u0345\0\u0364\0\u0383\0\u01b2\0\u03a2"+
    "\0\u022e\0\u0155\0\u024d\0\u026c\0\u026c\0\u03c1\0\u02e8\0\u0307"+
    "\0\u03e0\0\u0326\0\u0345\0\u03ff\0\u041e\0\u043d\0\u0155\0\u0155"+
    "\0\u045c\0\u047b\0\u049a\0\u04b9\0\u04d8\0\u04f7\0\u0516\0\u0535"+
    "\0\u0554\0\u0573\0\u0592\0\u05b1\0\u05d0\0\u05ef\0\u060e\0\u062d"+
    "\0\u064c\0\u066b\0\u068a\0\u06a9\0\u06c8\0\u06e7\0\u0706\0\u0725"+
    "\0\u0744\0\u0763\0\u0782\0\u07a1\0\u07c0\0\u07df\0\u07fe\0\u081d"+
    "\0\u083c\0\u085b\0\u087a\0\u0899\0\u08b8\0\u08d7\0\u08f6\0\u0915"+
    "\0\u0934\0\u0953\0\u0972\0\u0991\0\u09b0\0\u09cf\0\u09ee\0\u0a0d"+
    "\0\u0a2c\0\u0a4b\0\u0a6a\0\u0a89\0\u0aa8\0\u0ac7\0\u0ae6\0\u0b05"+
    "\0\u0b24\0\u0b43\0\u0b62\0\u0155\0\u0b81\0\u0ba0\0\u0bbf\0\u0155"+
    "\0\u0bde\0\u0bfd\0\u0c1c\0\u0c3b\0\u0155";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[125];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\14\1\15\2\14\1\16\33\14\1\15\2\17\1\16"+
    "\1\14\3\20\1\21\1\20\1\14\1\17\16\20\1\14"+
    "\3\20\2\14\2\22\7\14\1\23\1\22\23\14\1\24"+
    "\2\14\1\25\33\14\1\26\1\27\1\30\1\25\1\14"+
    "\3\20\1\14\1\20\1\14\1\30\16\20\1\14\3\20"+
    "\1\31\1\32\1\22\1\33\1\31\1\14\1\34\5\31"+
    "\1\33\21\31\1\35\1\14\1\36\2\14\1\37\1\14"+
    "\6\37\1\14\17\37\1\40\2\37\1\14\1\41\2\14"+
    "\1\37\1\14\6\37\1\14\17\37\1\40\2\37\1\14"+
    "\1\42\2\14\1\37\1\14\6\37\1\14\17\37\1\40"+
    "\2\37\1\14\1\43\2\44\4\14\2\45\2\14\1\44"+
    "\1\14\15\45\2\14\1\45\2\14\1\43\2\44\4\14"+
    "\1\45\1\46\2\14\1\44\1\14\15\45\2\14\1\45"+
    "\1\14\40\0\1\15\35\0\1\16\1\0\3\16\1\0"+
    "\31\16\1\0\1\15\2\47\10\0\1\47\26\0\1\20"+
    "\1\0\5\20\2\0\16\20\1\0\3\20\11\0\1\50"+
    "\27\0\2\22\10\0\1\22\22\0\1\51\1\52\3\51"+
    "\1\0\31\51\1\0\1\53\1\54\1\55\10\0\1\55"+
    "\23\0\1\53\2\55\10\0\1\55\22\0\1\31\2\0"+
    "\2\31\2\0\27\31\1\0\1\31\1\0\1\22\1\33"+
    "\1\31\2\0\5\31\1\33\21\31\10\0\1\56\30\0"+
    "\1\36\32\0\1\57\6\0\1\60\1\0\5\60\1\61"+
    "\1\0\22\60\1\0\1\36\2\0\1\60\1\0\5\60"+
    "\1\61\1\0\17\60\1\62\2\60\1\0\1\43\2\63"+
    "\10\0\1\63\32\0\2\45\4\0\15\45\2\0\1\45"+
    "\11\0\1\45\1\64\4\0\15\45\2\0\1\45\12\0"+
    "\1\65\35\0\1\66\1\0\1\67\3\0\15\66\4\0"+
    "\1\61\1\70\35\61\10\0\1\45\1\71\4\0\15\45"+
    "\2\0\1\45\12\0\1\72\35\0\2\66\1\67\1\66"+
    "\2\0\15\66\14\0\1\45\1\73\4\0\15\45\2\0"+
    "\1\45\12\0\1\74\35\0\1\45\1\75\4\0\15\45"+
    "\2\0\1\45\17\0\1\76\30\0\2\45\4\0\1\45"+
    "\1\77\13\45\2\0\1\45\20\0\1\100\27\0\2\45"+
    "\4\0\4\45\1\101\10\45\2\0\1\45\21\0\1\102"+
    "\26\0\2\45\4\0\7\45\1\103\5\45\2\0\1\45"+
    "\22\0\1\104\17\0\1\105\5\0\2\45\4\0\15\45"+
    "\2\0\1\45\23\0\1\106\37\0\1\107\15\0\1\110"+
    "\54\0\1\111\41\0\1\112\36\0\1\113\33\0\1\114"+
    "\20\0\1\115\57\0\1\116\37\0\1\117\14\0\1\120"+
    "\55\0\1\121\41\0\1\122\32\0\1\123\37\0\1\124"+
    "\37\0\1\125\34\0\1\126\45\0\1\127\31\0\1\130"+
    "\44\0\1\131\25\0\1\132\7\0\1\133\40\0\1\134"+
    "\32\0\1\135\41\0\1\136\40\0\1\137\6\0\1\140"+
    "\65\0\1\141\24\0\1\142\45\0\1\143\42\0\1\144"+
    "\15\0\1\145\44\0\1\146\36\0\1\147\30\0\1\150"+
    "\51\0\1\151\23\0\1\152\36\0\1\153\51\0\1\154"+
    "\23\0\1\155\36\0\1\156\54\0\1\157\20\0\1\160"+
    "\36\0\1\161\45\0\1\162\27\0\1\163\26\0\1\164"+
    "\1\161\11\0\1\161\41\0\1\165\30\0\1\166\36\0"+
    "\1\167\26\0\1\170\1\166\11\0\1\166\33\0\1\171"+
    "\36\0\1\172\36\0\1\173\36\0\1\174\26\0\1\175"+
    "\1\174\11\0\1\174\22\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3162];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\13\0\1\11\6\1\2\11\5\1\1\11\2\1\1\11"+
    "\5\1\1\11\3\1\3\0\1\11\1\0\1\1\7\0"+
    "\1\1\2\0\2\11\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\60\0\1\11"+
    "\3\0\1\11\4\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[125];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Deb822Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL.charAt(zzMarkedPosL-1)) {
        case '\n':
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':  // fall through
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 20: break;
          case 2: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 21: break;
          case 3: 
            { return Deb822Types.COMMENT;
            } 
            // fall through
          case 22: break;
          case 4: 
            { yybegin(WAITING_FOR_SEPARATOR); return Deb822Types.FIELD_NAME;
            } 
            // fall through
          case 23: break;
          case 5: 
            { yybegin(PARSING_VALUE); return Deb822Types.SEPARATOR;
            } 
            // fall through
          case 24: break;
          case 6: 
            { yybegin(YYINITIAL); return Deb822Types.PARAGRAPH_FINISH;
            } 
            // fall through
          case 25: break;
          case 7: 
            { yybegin(PARSING_VALUE); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 26: break;
          case 8: 
            { return Deb822Types.VALUE_TOKEN;
            } 
            // fall through
          case 27: break;
          case 9: 
            { yybegin(MAYBE_CONT_VALUE); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 28: break;
          case 10: 
            { return Deb822Types.COMMA;
            } 
            // fall through
          case 29: break;
          case 11: 
            { yybegin(YYINITIAL); return Deb822Types.GPG_ARMOR_HEADERS_END;
            } 
            // fall through
          case 30: break;
          case 12: 
            { yybegin(GPG_SIGNATURE_BLOB); return Deb822Types.GPG_ARMOR_HEADERS_END;
            } 
            // fall through
          case 31: break;
          case 13: 
            { return Deb822Types.GPG_SIGNATURE_BLOB_PART;
            } 
            // fall through
          case 32: break;
          case 14: 
            { yybegin(PARSING_VALUE); return Deb822Types.HANGING_CONT_VALUE_TOKEN;
            } 
            // fall through
          case 33: break;
          case 15: 
            { return Deb822Types.SUBSTVAR_TOKEN;
            } 
            // fall through
          case 34: break;
          case 16: 
            { return Deb822Types.GPG_ARMOR_HEADER;
            } 
            // fall through
          case 35: break;
          case 17: 
            { yybegin(GPG_PARSE_ARMORED_HEADERS); return Deb822Types.GPG_END_SIGNATURE;
            } 
            // fall through
          case 36: break;
          case 18: 
            { yybegin(GPG_BEGIN_SIGNATURE_ARMORED_HEADERS); return Deb822Types.GPG_BEGIN_SIGNATURE;
            } 
            // fall through
          case 37: break;
          case 19: 
            { yybegin(GPG_PARSE_ARMORED_HEADERS); return Deb822Types.GPG_BEGIN_SIGNED_MESSAGE;
            } 
            // fall through
          case 38: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
